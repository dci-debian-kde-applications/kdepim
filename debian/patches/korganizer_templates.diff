Author: Sergio Martins <iamsergio@gmail.com>
Description: Don't let templates override the dates that the user chose.
 .
 Dates should never be overriden by templates.
 .
 BUG: 190545
 BUG: 294169
Origin: upstream, commit:2b160d53fe9c83fc2a0e65e510d0f02cb8670552
Bug-Debian: http://bugs.debian.org/717093
Applied-Upstream: 4.11

--- a/incidenceeditor-ng/incidencedatetime.cpp
+++ b/incidenceeditor-ng/incidencedatetime.cpp
@@ -31,6 +31,8 @@
 //#include "ui_incidencedatetime.h"
 //#endif
 
+#include <calendarsupport/kcalprefs.h>
+
 #include <KCalCore/ICalTimeZones>
 #include <KCalUtils/IncidenceFormatter>
 
@@ -39,6 +41,40 @@
 
 using namespace IncidenceEditorNG;
 
+
+/**
+ * Returns true if the incidence's dates are equal to the default ones specified in config.
+ */
+static bool incidenceHasDefaultTimes( const KCalCore::Incidence::Ptr &incidence )
+{
+  if (incidence->allDay())
+    return false;
+
+  QTime defaultDuration = CalendarSupport::KCalPrefs::instance()->defaultDuration().time();
+  if ( !defaultDuration.isValid() )
+    return false;
+
+  QTime defaultStart = CalendarSupport::KCalPrefs::instance()->defaultDuration().time();
+  if ( !defaultStart.isValid() )
+    return false;
+
+  if ( incidence->dtStart().time() == defaultStart ) {
+    if ( incidence->type() == KCalCore::Incidence::TypeJournal )
+      return true; // no duration to compare with
+
+    const KDateTime start = incidence->dtStart();
+    const KDateTime end   = incidence->dateTime( KCalCore::Incidence::RoleEnd );
+    if (!end.isValid() || !start.isValid())
+      return false;
+
+    const int durationInSeconds = defaultDuration.hour()*3600 + defaultDuration.minute()*60;
+    return start.secsTo(end) == durationInSeconds;
+  }
+
+  return false;
+}
+
+
 IncidenceDateTime::IncidenceDateTime( Ui::EventOrTodoDesktop *ui )
   : IncidenceEditor( 0 ), mTimeZones( new KCalCore::ICalTimeZones ), mUi( ui ),
     mTimezoneCombosWhereVisibile( false )
@@ -540,8 +576,13 @@ void IncidenceDateTime::load( const KCal
   mUi->mWholeDayCheck->setChecked( event->allDay() );
   enableTimeEdits();
 
-  bool isTemplate = false; // TODO
-  if ( !isTemplate ) {
+  const bool isTemplate = event->customProperty( "kdepim", "isTemplate" ) == "true";
+  if ( isTemplate ) {
+    if ( incidenceHasDefaultTimes( event ) ) {
+        // We only use the template times if the user didn't override them.
+        setTimes( event->dtStart(), event->dtEnd() );
+    }
+  } else {
     KDateTime startDT = event->dtStart();
     KDateTime endDT = event->dtEnd();
     /*
@@ -562,13 +603,7 @@ void IncidenceDateTime::load( const KCal
       }
     }
     */
-
     setDateTimes( startDT, endDT );
-  } else {
-    // set the start/end time from the template, only as a last resort #190545
-    if ( !event->dtStart().isValid() || !event->dtEnd().isValid() ) {
-      setTimes( event->dtStart(), event->dtEnd() );
-    }
   }
 
   switch( event->transparency() ) {
@@ -605,8 +640,13 @@ void IncidenceDateTime::load( const KCal
   mUi->mWholeDayCheck->setChecked( journal->allDay() );
   enableTimeEdits();
 
-  bool isTemplate = false; // TODO
-  if ( !isTemplate ) {
+  const bool isTemplate = journal->customProperty( "kdepim", "isTemplate" ) == "true";
+  if ( isTemplate ) {
+    if ( incidenceHasDefaultTimes( journal ) ) {
+        // We only use the template times if the user didn't override them.
+        setTimes( journal->dtStart(), KDateTime() );
+    }
+  } else {
     KDateTime startDT = journal->dtStart();
 
     /*
@@ -622,11 +662,6 @@ void IncidenceDateTime::load( const KCal
       startDT = startDT.toLocalZone();
     }
     setDateTimes( startDT, KDateTime() );
-  } else {
-    // set the start/end time from the template, only as a last resort #190545
-    if ( !journal->dtStart().isValid() ) {
-      setTimes( journal->dtStart(), KDateTime() );
-    }
   }
 }
 
@@ -670,9 +705,18 @@ void IncidenceDateTime::load( const KCal
 
   const KDateTime rightNow = KDateTime( QDate::currentDate(), QTime::currentTime() ).toLocalZone();
 
-  const KDateTime endDT   = todo->hasDueDate() ? todo->dtDue( true/** first */ ) : rightNow;
-  const KDateTime startDT = todo->hasStartDate() ? todo->dtStart( true/** first */ ) : rightNow;
-  setDateTimes( startDT, endDT );
+
+  const bool isTemplate = todo->customProperty( "kdepim", "isTemplate" ) == "true";
+  if ( isTemplate ) {
+    if ( incidenceHasDefaultTimes( todo ) ) {
+        // We only use the template times if the user didn't override them.
+        setTimes( todo->dtStart(), todo->dateTime(KCalCore::Incidence::RoleEnd) );
+    }
+  } else {
+    const KDateTime endDT   = todo->hasDueDate() ? todo->dtDue( true/** first */ ) : rightNow;
+    const KDateTime startDT = todo->hasStartDate() ? todo->dtStart( true/** first */ ) : rightNow;
+    setDateTimes( startDT, endDT );
+  }
 }
 
 void IncidenceDateTime::save( const KCalCore::Event::Ptr &event )
--- a/incidenceeditor-ng/eventortododialog.cpp
+++ b/incidenceeditor-ng/eventortododialog.cpp
@@ -303,7 +303,11 @@ void EventOrTodoDialogPrivate::loadTempl
   mIeDateTime->setActiveDate( QDate() );
   KCalCore::Incidence::Ptr newInc = KCalCore::Incidence::Ptr( incidences.first()->clone() );
   newInc->setUid( KCalCore::CalFormat::createUniqueId() );
+
+  // We add a custom property so that some fields aren't loaded, dates for example
+  newInc->setCustomProperty( QByteArray("kdepim"), "isTemplate", "true");
   mEditor->load( newInc );
+  newInc->removeCustomProperty( QByteArray(), "isTemplate");
 }
 
 void EventOrTodoDialogPrivate::manageTemplates()
